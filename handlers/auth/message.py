from datetime import datetime

from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from sqlalchemy import select

from conf import REALTOR_PASSWORD
from db.base import get_session
from db.models.realtor import Realtor
from handlers.auth.buttom import main_kb, contact_kb, register_buttons
from handlers.auth.command import auth_router
from handlers.auth.schema import Register


@auth_router.callback_query(F.data == "register")
async def handle_register_click(
        callback: CallbackQuery,
        state: FSMContext
):
    # Set default value
    realtor = None

    async for session in get_session():
        realtor_query = await session.execute(
            select(Realtor).where(Realtor.telegram_id == callback.from_user.id)
        )
        realtor = realtor_query.scalar_one_or_none()

    if realtor:
        await callback.answer("–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!", show_alert=True)
        return

    await callback.message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:")
    await state.set_state(Register.ask_password)


@auth_router.message(Register.ask_password)
async def check_password(
        message: Message,
        state: FSMContext
):
    if message.text != REALTOR_PASSWORD:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return

    await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º º—è:")
    await state.set_state(Register.ask_first_name)


@auth_router.message(Register.ask_first_name)
async def ask_last_name(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ:")
    await state.set_state(Register.ask_last_name)


@auth_router.message(Register.ask_last_name)
async def ask_phone(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text)

    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (—É —Ñ–æ—Ä–º–∞—Ç—ñ +380...) –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É:",
        reply_markup=contact_kb
    )
    await state.set_state(Register.ask_phone)


@auth_router.message(Register.ask_phone)
async def ask_birth_date(message: Message, state: FSMContext):
    phone = (
        message.contact.phone_number
        if message.contact
        else message.text
    )

    await state.update_data(phone_number=phone)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (–î–î.–ú–ú.–†–†–†–†):")
    await state.set_state(Register.ask_birth_date)


@auth_router.message(Register.ask_birth_date)
async def finish_registration(message: Message, state: FSMContext):
    try:
        birth_date = datetime.strptime(message.text, "%d.%m.%Y").date()
    except ValueError:
        await message.answer("‚ùóÔ∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑: –î–î.–ú–ú.–†–†–†–†")
        return

    await state.update_data(date_of_birth=birth_date)
    data = await state.get_data()

    async for session in get_session():
        realtor = Realtor(
            telegram_id=message.from_user.id,
            first_name=data["first_name"],
            last_name=data["last_name"],
            phone_number=data["phone_number"],
            date_of_birth=data["date_of_birth"],
        )
        session.add(realtor)
        await session.commit()

    await message.answer(
        "üéâ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.",
        reply_markup=main_kb,
    )
    await state.clear()


@auth_router.callback_query(F.data == "login")
async def handle_login(callback: CallbackQuery, state: FSMContext):
    # Set default value
    realtor = None
    async for session in get_session():
        realtor_query = await session.execute(
            select(Realtor).where(Realtor.telegram_id == callback.from_user.id)
        )
        realtor = realtor_query.scalar_one_or_none()

    if not realtor:
        await callback.message.answer(
            "‚ùóÔ∏è –í–∞—Å —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ. –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–π–¥—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.",
            reply_markup=register_buttons,
        )
        return

    await callback.message.answer("‚úÖ –í–∏ —É–≤—ñ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ.", reply_markup=main_kb)
    await state.clear()
